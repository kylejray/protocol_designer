:mod:`protocol_designer.system`
===============================

.. py:module:: protocol_designer.system


Module Contents
---------------


.. py:class:: System(protocol, potential)

   This class bridges the gap between protocol designer
   and the info engine sims package. It take a protocol
   and a potential and packages it into a system that can
   be simulated.

   .. attribute:: protocol

      this is the signal that controls the potential parameters

      :type: instance of the Protocol class

   .. attribute:: potential

      this is the potential energy landscape we will apply the
      protocol too

      :type: instance of the Potential class

   .. method:: copy(self)


      Generate a copy of the system

      :returns: **copy**
      :rtype: instance of the System class


   .. method:: get_energy(self, coords, t)


      Calculate the energy of a particle at location coords at time t

      :param coords: array of N_c sets of coordinates in N_d dimensions
      :type coords: ndarray of dimensions [N_c, N_d, 2]
      :param t: time at which you want to evaluate the energy
      :type t: float or int

      :returns: **U+T**
      :rtype: ndarray of dimension [N_c,]


   .. method:: get_potential(self, coords, t)


      Calculate the potential energy of a particle at location coords at time t

      :param coords: array of N_c sets of coordinates in N_d dimensions
      :type coords: ndarray of dimensions [N_c, N_d, 2]
      :param t: time at which you want to evaluate the energy
      :type t: float or int

      :returns: **U**
      :rtype: ndarray of dimension [N_c,]


   .. method:: get_external_force(self, coords, t)


      Calculate the forces on a particle due to the potential energy
      at location coords at time t

      :param coords: array of N_c sets of coordinates in N_d dimensions
      :type coords: ndarray of dimensions [N_c, N_d, 2]
      :param t: time at which you want to evaluate the energy
      :type t: float or int

      :returns: **U**
      :rtype: ndarray of dimension [N_c, N_d]


   .. method:: eq_state(self, Nsample, t=None, resolution=1000, damped=None, manual_domain=None, axis1=1, axis2=2, slice_vals=None)



   .. method:: show_potential(self, t, resolution=100, surface=False, manual_domain=None, contours=50, axis1=1, axis2=2, slice_values=None)


      Shows a 1 or 2D plot of the potential at a time t

      :param t: the time you want to plot the potential at
      :type t: float
      :param resolution: the number of sample points to plot along each axis
      :type resolution: int
      :param surface: if True plots a wireframe surface in 3D
                      if False plots a contour plot in 2D
      :type surface: True/False
      :param manual_domain: if None, we pull the domain from the default potential.domain
                            if ndarray, a manual domain of the form [ (xmin,ymin,...), (xmax, ymax,...) ]
      :type manual_domain: None or ndarray of dimension (2, N_d)
      :param contours: sets number of contours to plot, or list of manually set contours
      :type contours: int or list
      :param axis1, axis2: which coordinate we will consider to be 'x' and 'y' for the plot
      :type axis1, axis2: int
      :param slice_values: these are the values we keep the other coordinates fixed at while sweeping through axis1 and axis2
      :type slice_values: ndarray of dimension [N_d,]

      :returns:
      :rtype: no returns, just plots a figure


   .. method:: animate_protocol(self, mesh=40, fps=10, frames=50, surface=False, save=False, manual_domain=None, n_contours=50, axis1=1, axis2=2, slice_values=None)


      Shows an animation of how the potential changes over the duration of your protocol, can be a little slow

      :param mesh: the number of sample points to plot along each axis
      :type mesh: int
      :param fps: frames per second in the animation
      :type fps: int
      :param frame: number of frames to render
      :type frame: int
      :param surface: if True plots a wireframe surface in 3D
                      if False plots a contour plot in 2D
      :type surface: True/False
      :param manual_domain: if None, we pull the domain from the default potential.domain
                            if ndarray, a manual domain of the form [ (xmin,ymin,...), (xmax, ymax,...) ]
      :type manual_domain: None or ndarray of dimension (2, N_d)
      :param n_contours: sets number of contours to plot, or list of manually set contours
      :type n_contours: int or list
      :param axis1, axis2: which coordinate we will consider to be 'x' and 'y' for the plot
      :type axis1, axis2: int
      :param slice_values: these are the values we keep the other coordinates fixed at while sweeping through axis1 and axis2
      :type slice_values: ndarray of dimension [N_d,]

      :returns: **anim**
      :rtype: animation.FuncAnimate object


   .. method:: get_domain(self, axis1, axis2, domain=None)


      a helper function used only internally by other methods
      it is for deciding what the relevant domain is
      for visualization purposes.

      :param axis1, axis2: the coordinates you want to get the domain for, i.e. axis1=2 means
                           we are plotting the 'y' coordiante on the first axis
      :type axis1, axis2: int
      :param domain: if None, we pull the domain from the potential.domain
                     if ndarray, a manual domain of the form [ (xmin,ymin,...), (xmax, ymax,...) ]
      :type domain: None, or array of dimension [2, N_d]

      :returns: * *if a 1D potential*
                * **x_min, x_max, [], []** (*float*) -- x_min, x_max is our relevant domain boundaries
                  y_min ,y_max are empty placeholder lists
                * *if a 2D potential*
                * **x_min, x_max, y_min, y_max** (*floats*) -- relevant domain boundaries for axis1 and axis2, respectively


   .. method:: lattice(self, t, resolution, x_min, x_max, y_min, y_max, axis1=1, axis2=2, slice_values=None)


      Helper function used internally by the visualization code. Creates a
      1D or 2D lattice of coordiantes and calculates the potential at those coordinates

      :param t: time of interest for the potential energy
      :type t: float
      :param resolution: how many points we want to sample along each axis
      :type resolution: int
      :param x_min, x_max, y_min, y_max: min/max values of the horizontal and vertical axes, respectively
      :type x_min, x_max, y_min, y_max: float
      :param axis1, axis2: which coordinate we will consider to be 'x' and 'y' for the plot
      :type axis1, axis2: int
      :param slice_values: there are the values we keep the other coordinates fixed at while sweeping through axis1 and axis2
      :type slice_values: ndarray of dimension [N_d,]

      :returns: * *if 1D* --

                  U: ndarray of dimension [resolution,]
                      the potential at our test points, X

                  X: ndarray of dimensiion [resolution]
                      array of our test points
                * *if 2D* --

                  U: ndarray of dimension [resolution, resolution]
                      the potential at our test points: X,Y

                  X,Y: np arrays of dimension [resolution, resolution]
                      X/Y gives the axis1/axis2 coordinates at each lattice point
                      they are the results of an np.meshgrid operation



